# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
<!-- markdownlint-disable MD024 -->\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
{%- set init_commit = get_env(name="FIRST_COMMIT", default="") -%}
{%- set this_version = "Unreleased" -%}

{% if version -%}
    {%- set this_version = version | trim_start_matches(pat="v") -%}
    ## [{{ this_version }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {%- if message %}

        > {{ message }}
    {%- endif %}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits | unique(attribute="message") %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
            {% if commit.remote.username %} by \\@{{ commit.remote.username }}{%- endif -%}
            {% if commit.remote.pr_number %} in \
            [#{{ commit.remote.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.remote.pr_number }})
            {%- else %} in \
            [`{{ commit.id | truncate(length=7, end="") }}`]({{ self::remote_url() }}/commit/{{commit.id }})
            {%- endif -%}
    {% endfor %}
{% endfor -%}

{% set first_commit = previous.version -%}
{%- set last_commit = "HEAD" -%}
{% if version -%}
    {%- set last_commit = version -%}
    {%- if not previous.version -%}
        {%- set first_commit = init_commit -%}
    {%- endif -%}
{%- endif %}
[{{ this_version }}]: {{ self::remote_url() }}/compare/{{ first_commit }}...{{ last_commit }}

Full commit diff: [`{% if previous.version -%}
    {{ first_commit }}
{%- else -%}
    {{ init_commit | truncate(length=7, end="") }}
{%- endif %}...{{ last_commit }}`][{{ this_version }}]
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
    {% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
    - @{{ contributor.username }} made their first contribution
        {%- if contributor.pr_number %} in \
            [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
        {%- endif %}
    {%- endfor %}
{% endif %}

"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# The file path for output. This can be overridden with `--output` CLI arg
# output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Remove the auto-appended PR numbers from commit titles.
    # For example, `some PR title (#42)` becomes `some PR title`
    # NOTE: git-cliff will append a link to the commit or PR in the commit title.
    # For example, `some PR title (#42)` gets displayed as
    # `some PR title by <user> in <link to #42>`
    { pattern = '(?m)(\s?\(#[0-9]+\))$', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    # The order of parsers matters. Put rules for PR labels first to prioritize PR labels.
    { field = "github.pr_labels", pattern = "breaking", group = "<!-- 0 --> 💥 Breaking changes" },
    { field = "github.pr_labels", pattern = "breaking-change", group = "<!-- 0 --> 💥 Breaking changes" },
    { field = "github.pr_labels", pattern = "feature", group = "<!-- 1 --> 🚀 New features and improvements" },
    { field = "github.pr_labels", pattern = "enhancement", group = "<!-- 1 --> 🚀 New features and improvements" },
    { field = "github.pr_labels", pattern = "deprecated", group = "<!-- 2 --> ⚠️ Deprecated" },
    { field = "github.pr_labels", pattern = "removed", group = "<!-- 3 --> 🚨 Removed" },
    { field = "github.pr_labels", pattern = "bug", group = "<!-- 4 --> 🐛 Bug fixes" },
    { field = "github.pr_labels", pattern = "bugfix", group = "<!-- 4 --> 🐛 Bug fixes" },
    { field = "github.pr_labels", pattern = "fix", group = "<!-- 4 --> 🐛 Bug fixes" },
    { field = "github.pr_labels", pattern = "regression", group = "<!-- 4 --> 🐛 Bug fixes" },
    { field = "github.pr_labels", pattern = "security", group = "<!-- 5 --> 🔐 Security" },
    { field = "github.pr_labels", pattern = "dependencies", group = "<!-- 6 --> 📦 Dependency updates" },
    { field = "github.pr_labels", pattern = "test", group = "<!-- 7 --> 🚦 Tests"},
    { field = "github.pr_labels", pattern = "tests", group = "<!-- 7 --> 🚦 Tests"},
    { field = "github.pr_labels", pattern = "localization", group = "<!-- 8 --> 🌐 Localization and translation"},
    { field = "github.pr_labels", pattern = "documentation", group = "<!-- 9 --> 📝 Documentation" },
    { field = "github.pr_labels", pattern = "chore", group = "<!-- 10 --> 👻 Maintenance" },
    { field = "github.pr_labels", pattern = "maintenance", group = "<!-- 10 --> 👻 Maintenance" },
    { field = "github.pr_labels", pattern = "internal", group = "<!-- 10 --> 👻 Maintenance" },
    { field = "github.pr_labels", pattern = "developer", group = "<!-- 11 --> 👷 Changes for developers" },
    { field = "github.pr_labels", pattern = "refactor", group = "<!-- 12 --> ✍ Other changes" },
    { field = "github.pr_labels", pattern = "skip-changelog", skip = true },
    { field = "github.pr_labels", pattern = "no-changelog", skip = true },
    { field = "github.pr_labels", pattern = "invalid", skip = true },
    # Here are rules that apply to conventional commits
    { field = "group", pattern = "add", group = "<!-- 1 --> 🚀 New features and improvements" },
    { field = "group", pattern = "feat", group = "<!-- 1 --> 🚀 New features and improvements" },
    { field = "group", pattern = "fix", group = "<!-- 4 --> 🐛 Bug fixes" },
    { field = "group", pattern = "perf", group = "<!-- 13 --> ⚡ Performance" },
    { field = "group", pattern = "build", group = "<!-- 6 --> 📦 Dependency updates" },
    { field = "group", pattern = "test", group = "<!-- 7 --> 🚦 Tests" },
    { field = "group", pattern = "docs", group = "<!-- 9 --> 📝 Documentation" },
    { field = "group", pattern = "chore", group = "<!-- 10 --> 👻 Maintenance" },
    { field = "group", pattern = "style", group = "<!-- 10 --> 👻 Maintenance" },
    { field = "breaking", pattern = true, group = "<!-- 0 --> 💥 Breaking changes" },
    { field = "group", pattern = "remove", group = "<!-- 3 --> 🚨 Removed" },
    { field = "group", pattern = "deprecate", group = "<!-- 2 --> ⚠️ Deprecated" },
    { field = "group", pattern = "delete", group = "<!-- 3 --> 🚨 Removed" },
    { field = "group", pattern = "security", group = "<!-- 5 --> 🔐 Security" },
    { field = "group", pattern = "refactor", group = "<!-- 12 --> ✍ Other changes" },
    # Here are rules that apply to unconventional commits
    { message = "(?i)^add", group = "<!-- 1 --> 🚀 New features and improvements" },
    { message = "(?i)^support", group = "<!-- 1 --> 🚀 New features and improvements" },
    { message = "^.*: support", group = "<!-- 1 --> 🚀 New features and improvements" },
    { message = "^.*: add", group = "<!-- 1 --> 🚀 New features and improvements" },
    { message = "^.*: deprecated", group = "<!-- 2 --> ⚠️ Deprecated" },
    { message = "(?i)deprecate", group = "<!-- 2 --> ⚠️ Deprecated" },
    { message = "(?i)tests", group = "<!-- 7 --> 🚦 Tests"},
    { message = "(?i)remove", group = "<!-- 3 --> 🚨 Removed" },
    { message = "^.*: remove", group = "<!-- 3 --> 🚨 Removed" },
    { message = "^.*: delete", group = "<!-- 3 --> 🚨 Removed" },
    { message = "(?i)^fix", group = "<!-- 4 --> 🐛 Bug fixes" },
    { message = "^.*: fix", group = "<!-- 4 --> 🐛 Bug fixes" },
    { message = "^.*: secure", group = "<!-- 5 --> 🔐 Security" },
    { message = "(?i)secure", group = "<!-- 5 --> 🔐 Security" },
    { message = "(?i)security", group = "<!-- 5 --> 🔐 Security" },
    { message = "^.*: security", group = "<!-- 5 --> 🔐 Security" },
    { message = "doc", group = "<!-- 9 --> 📝 Documentation" },
    { message = "docs", group = "<!-- 9 --> 📝 Documentation" },
    { message = "documentation", group = "<!-- 9 --> 📝 Documentation" },
    # group any un-matched commits into the "Other changes" category
    { message = "(?i)refactor", group = "<!-- 12 --> ✍ Other changes" },
    { field = "github.pr_labels", pattern = ".*", group = "<!-- 12 --> ✍ Other changes" },
    { message = ".*", group = "<!-- 12 --> ✍ Other changes" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
